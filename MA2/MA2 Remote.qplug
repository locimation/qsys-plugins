--[[

  MA2 Remote Plugin
  Author: Michael Goodyear
  Email: michael@locimation.com
  Version: 1.0.0

  Copyright 2020 Locimation Pty Ltd

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software
  and associated documentation files (the "Software"),
  to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the
  following conditions:

  The above copyright notice and this permission
  notice shall be included in all copies or substantial
  portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

]]

PluginInfo = {
  Name = "grandMA2 Remote",
  Description = "Initial public release",
  Version = "1.0.0",
  Id = "4cf34977-8b8d-40b5-888b-18a7a31cbc35"
}

MA2_LOGO = '';
MIT_FOOTER = '';

function GetColor()
  return {0,0,0}; -- black
end;

function GetProperties()

  local function fives(n)
    local arr = {};
    for i=1,n do table.insert(arr, tostring(i * 5)); end;
    return arr;
  end;

  return {
    {
      Name = 'Command Count',
      Type = 'integer',
      Min = 2,
      Max = 100,
      Value = 8
    },{
      Name = 'Fader Count',
      Type = 'enum',
      Choices = fives(4),
      Value = '10'
    },{
      Name = 'Button Count',
      Type = 'enum',
      Choices = fives(16),
      Value = '10'
    },{
      Name = 'Verbose Debug',
      Type = 'boolean',
      Value = false
    }
  };
end;  

function GetControls(props)

  return {
    {
      Name = 'Button',
      ControlType = 'Button',
      ButtonType = 'Momentary',
      Count = tonumber(props['Button Count'].Value),
      PinStyle = 'Input',
      UserPin = true
    },
    {
      Name = 'Button Status',
      ControlType = 'Indicator',
      IndicatorType = 'LED',
      Count = tonumber(props['Button Count'].Value),
      PinStyle = 'Output',
      UserPin = true
    },{
      Name = 'IP',
      ControlType = 'Text',
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Username',
      ControlType = 'Text',
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Password',
      ControlType = 'Text',
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Fader Info',
      ControlType = 'Button',
      ButtonType = 'Trigger',
      Count = tonumber(props['Fader Count'].Value)
    },{
      Name = 'Fader Button 1',
      ControlType = 'Button',
      ButtonType = 'Momentary',
      Count = tonumber(props['Fader Count'].Value),
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Fader Button 2',
      ControlType = 'Button',
      ButtonType = 'Momentary',
      Count = tonumber(props['Fader Count'].Value),
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Fader Button 3',
      ControlType = 'Button',
      ButtonType = 'Momentary',
      Count = tonumber(props['Fader Count'].Value),
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Fader Level',
      ControlType = 'Knob',
      ControlUnit = 'Percent',
      Min = 0, Max = 100,
      Count = tonumber(props['Fader Count'].Value),
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'TX',
      ControlType = 'Text',
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Command',
      ControlType = 'Text',
      Count = props['Command Count'].Value,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Send Command',
      ControlType = 'Button',
      ButtonType = 'Trigger',
      Count = props['Command Count'].Value,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Button Page',
      ControlType = 'Knob',
      ControlUnit = 'Integer',
      Min = 1, Max = 9999,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Fader Page',
      ControlType = 'Knob',
      ControlUnit = 'Integer',
      Min = 1, Max = 9999,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'First Button',
      ControlType = 'Knob',
      ControlUnit = 'Integer',
      Min = 101, Max = 191 - tonumber(props['Button Count'].Value),
      Value = 101,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'First Fader',
      ControlType = 'Knob',
      ControlUnit = 'Integer',
      Min = 1, Max = 91 - tonumber(props['Fader Count'].Value),
      Value = 1,
      PinStyle = 'Both',
      UserPin = true
    },{
      Name = 'Status',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Output',
      UserPin = true
    },{
      Name = 'Session',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    }
  };

end;

function GetPages(props)
  local pages = {
    { name = 'Setup' },
    { name = 'Action Buttons' }
  };
  for i=1,props['Fader Count'].Value-1,5 do
    table.insert(pages, { name = ('Faders %d-%d'):format(i, i+4) });
  end;
  table.insert(pages, { name = 'Command Buttons' });
  return pages;
end;

function GetControlLayout(props)
  local page = GetPages(props)[props['page_index'].Value].name;

  local strokeColor = { 254, 248, 134 };

  local layout = {};
  local graphics = {};

  local function bg(height)
    table.insert(graphics, {
      Type = 'GroupBox',
      Fill = { 0, 0, 0 },
      Position = { 0, 0 },
      Size = { 560, height }
    });
  end;

  local function ma_playback(layout)
    for k,v in pairs({
      Color = { 68, 66, 0 },
      UnlinkOffColor = true,
      OffColor = { 0, 0, 0 },
      FontSize = 14,
      StrokeColor = strokeColor,
      StrokeWidth = 2,
      Margin = 1,
      Padding = 0,
      Radius = 8,
      ButtonVisualStyle = 'Flat'
    }) do layout[k] = layout[k] or v; end;
    return layout;
  end;

  local function ma_textinput(layout)
    for k,v in pairs({
      Color = { 0, 75, 24 },
      StrokeColor = { 114, 183, 32 },
      StrokeWidth = 2,
      CornerRadius = 8,
      FontSize = 12,
      Margin = 10,
      TextBoxStyle = 'Normal'
    }) do layout[k] = layout[k] or v; end;
    return layout;
  end;

  local function ma_label(graphic)
    for k,v in pairs({
        Type = 'Label',
        Color = { 248, 244, 0 },
        HTextAlign = 'Left',
        FontSize = 14
    }) do graphic[k] = graphic[k] or v; end;
    table.insert(graphics, graphic);
  end;

  if(page == 'Setup') then
    bg(409);

    table.insert(graphics, {
      Type = 'Image',
      Position = { 415, 55 },
      Size = { 101, 101 },
      Image = MA2_LOGO
    });

    table.insert(graphics, {
      Type = 'Image',
      Position = { 47, 368 },
      Size = { 450, 20 },
      Image = MIT_FOOTER
    });
    
    for i,n in ipairs({'IP', 'Username', 'Password'}) do
      ma_label({ Position = { 30, 30 + (i-1) * 50 }, Size = { 100, 50 }, Text = n });
      layout[n] = ma_textinput({
        Position = { 130, 30 + (i-1) * 50 },
        Size = { 250, 50 },
        PrettyName = ('Config~%s'):format(n)
      });
    end;

    ma_label({ Position = { 30, 180 }, Size = { 100, 50 }, Text = 'Status' });
    layout['Status'] = ma_textinput({
      Position = { 130, 180 }, Size = { 390, 50 },
      Color = { 51, 51, 51 }, StrokeColor = { 102, 102, 102 }
    });

    for i,n in ipairs({'Button', 'Fader'}) do
      local nf = (n == 'Button' and 'Action Buttons' or 'Faders');
      ma_label({ Position = { 30, 190 + i * 50 }, Size = { 155, 50 }, Text = n .. ' Page & Executor'});
      layout[n .. ' Page'] = ma_textinput({ Position = { 220, 190 + i * 50 }, Size = { 150, 50 },
        PrettyName = ('%s~Page Number'):format(nf) });
      layout['First ' .. n] = ma_textinput({ Position = { 370, 190 + i * 50 }, Size = { 150, 50 },
        PrettyName = ('%s~First Exec Number'):format(nf) });
    end;

  elseif(page == 'Action Buttons') then
    local rows = math.ceil(props['Button Count'].Value / 5);
    bg(60 + rows * (118 + 15));

    for i=1,props['Button Count'].Value do
      local row = math.floor((i - 1) / 5);
      local col = (i - 1) % 5;
      layout['Button ' .. i] = ma_playback({
        Position = { 30 + 100 * col, 30 + (118 + 15) * row },
        Size = { 100, 118 },
        PrettyName = ('Action Buttons~Button %d'):format(i);
      });
      
      layout['Button Status ' .. i] = {
	    Position = { 72 + 100 * col, 30 + (118 + 15) * row + 118 },
        PrettyName = ('Action Button Status~Button %d'):format(i);
      };
    end;

  elseif(page:match('^Faders')) then
    bg(362);
    local firstFader = tonumber(page:match('^Faders (%d+)'));

    for i=1,5 do
      local fader = i + firstFader - 1;
      local x = 30 + 100 * (i - 1);

      layout['Fader Info ' .. fader] = ma_playback({ Position = { x, 30 }, Size = { 100, 102 } });
      layout['Fader Button 3 ' .. fader] = ma_playback({ Position = { x, 132 }, Size = { 100, 50 },
        PrettyName = ('Faders~Fader %d~Button 3'):format(fader) });
      layout['Fader Button 2 ' .. fader] = ma_playback({ Position = { x, 182 }, Size = { 100, 50 },
      PrettyName = ('Faders~Fader %d~Button 2'):format(fader)});
      layout['Fader Button 1 ' .. fader] = ma_playback({ Position = { x, 282 }, Size = { 100, 50 },
      PrettyName = ('Faders~Fader %d~Button 1'):format(fader)});

      layout['Fader Level ' .. fader] = ma_playback({
        Position = { x, 232 }, Size = { 100, 50 },
        Color = { 51, 51, 51 }, UnlinkOffColor = true, OffColor = { 0, 0, 0 },
        PrettyName = ('Faders~Fader %d~Level'):format(fader)
      });

    end;
  
  elseif(page == 'Command Buttons') then

    bg(40 + props['Command Count'].Value * 50)

    for i=1, props['Command Count'].Value do
      local y = 20 + (i - 1) * 50;
    
      ma_label({
        Position = { 30, y },
        Size = { 90, 50 },
        Text = 'CMD ' .. i
      });

      layout['Command ' .. i] = ma_textinput({
        Position = { 120, y },
        Size = { 310, 50 },
        PrettyName = ('Command Buttons~CMD %d~Command'):format(i);
      });

      layout['Send Command ' .. i] = {
        Position = { 440, y },
        Size = { 90, 50 },
        Color = { 68, 66, 0 },
        UnlinkOffColor = true,
        OffColor = { 0, 0, 0 },
        StrokeColor = strokeColor,
        StrokeWidth = 2,
        CornerRadius = 8,
        Legend = 'Send',
        FontSize = 12,
        Margin = 10,
        PrettyName = ('Command Buttons~CMD %d~Send'):format(i);
      };
    
    end;

  end;

  return layout, graphics;
end;

if(not Controls) then return; end;

DEBUG = Properties['Verbose Debug'].Value;

json = require('rapidjson');

S = TcpSocket.New();
S.ReconnectTimeout = 0;

function randomWebSocketKey()
  return Crypto.Base64Encode(('x'):rep(16):gsub('.', function() return string.char(math.random(0,255)) end));
end;

S.Connected = function()
  Mode = 'HTTP';
  print('# Connected');
  S:Write(table.concat({
    'GET /?ma=1 HTTP/1.1',
    'Host: <HOST>',
    'Connection: Upgrade',
    'Upgrade: websocket',
    'Sec-WebSocket-Version: 13',
    'Sec-WebSocket-Key: ' .. randomWebSocketKey()
  }, '\r\n').. '\r\n\r\n');
  Controls.Session.String = '0';
end;

function send(data)
  if(type(data) == 'table') then data = json.encode(data); end;
  if(DEBUG) then print('> ' .. data); end;
  local len, epl = #data, '';
  if len > 125 and len <= 0xffff then epl = bitstring.pack('16:int', len); len = 126; 
  elseif len > 125 and len < 2^53 then epl = bitstring.pack('64:int', len); len = 127; end
  local frame = bitstring.pack('1:int, 3:int, 4:int 1:int 7:int', 1, 0, 1, 1, len) .. epl .. '\0\0\0\0' .. data;
  S:Write(frame); 
end;
 
Mode = 'HTTP';
S.Data = function(sock)

  if(Mode == 'HTTP') then
    for http in function() return sock:ReadLine(TcpSocket.EOL.Custom, '\r\n\r\n'); end do
      local code = http:match('^[^ ]+ (%d+)');
      if(code == '101') then
        Mode = 'WS-INIT';
        --send(<ON-CONNECT MESSAGE>);
      end;
    end;
  end;
  
  while(true) do
    if(Mode == 'WS-INIT') then
      if(sock.BufferLength < 2) then return; end;
      local fin, rsv, opcode, mask, len = bitstring.unpack('1:int 3:int 4:int 1:int 7:int', sock:Read(2));
      local sbuf = Packet and Packet.fin and Packet.buf or nil;
      Packet = { fin=fin, rsv=rsv, opcode=opcode, mask=mask, len=len };
      if(len > 125) then Mode = 'WS-EPL'; 
      else Mode = 'WS-PAYLOAD'; end; 
    end;
     
    if(Mode == 'WS-EPL') then
      if(Packet.len == 126) then
        if(sock.BufferLength < 2) then return; end;
        Packet.len = bitstring.unpack('16:int', sock:Read(2));
        Mode = 'WS-PAYLOAD';
      elseif(Packet.len == 127) then
        if(sock.BufferLength < 8) then return; end;
        Packet.len = bitstring.unpack('64:int', sock:Read(8));
      end;
    end;
    
    if(Mode == 'WS-PAYLOAD') then
      if(sock.BufferLength < Packet.len) then return; end;
      Mode = 'WS-INIT'; -- reset for handling of next frame
      Buf = (Buf or '') .. (sock:Read(Packet.len) or '');
      if(Packet.fin == 1) then
        local msg = Buf; Buf = nil;
        if(DEBUG) then print('< ' .. msg); end;
        local ok, data = pcall(json.decode, msg);
        if(ok and data) then
          handle(data);
        end;
      end;
    end;

  end;

end;

function session() return tonumber(Controls.Session.String) or 0; end;
function username() return Controls.Username.String; end;
function password() return Controls.Password.String; end;
function connected() return S.IsConnected and LoggedIn; end;

function status(color, text)
  Controls.Status.Color = color;
  Controls.Status.String = text;
end;

function reconnect()
  if(S.IsConnected) then S:Disconnect(); end;
  local ipOk = (Controls.IP.String ~= '');
  Controls.IP.Color = ipOk and '' or '#800';
  local usernameOk = (Controls.Username.String ~= '')
  Controls.Username.Color = usernameOk and '' or '#800';
  if(ipOk and usernameOk) then
    status('blue', 'Connecting...');
    S:Connect(Controls.IP.String, 80);
  end;
end; reconnect();

S.ReconnectTimeout = 10;  

S.EventHandler = function(_,e)
  print('# ' .. e);
  status('red', 'SOCKET ' .. e);
  LoggedIn = false;
end;

StatusTimer = Timer.New();
StatusTimer.EventHandler = function()

  -- Check timeout
  if(LastResult) then
    if (os.time() - LastResult > 2) then
      status('red', 'Timed out.');
      LastResult = nil;
      reconnect();
    else
      status('green', 'Connected.');
    end;
  end;

end; StatusTimer:Start(1);

Controls.IP.EventHandler = reconnect;
Controls.Username.EventHandler = reconnect;
Controls.Password.EventHandler = reconnect;

function handle(data) 

  if(data.status == 'server ready' and data.appType == 'gma2') then
    send({session = 0}); return;
  end;
  
  if(data.session) then Controls.Session.String = data.session; end;
  
  if(data.forceLogin) then
    return send({requestType = 'login', username = username(), password = Crypto.MD5Compute(password()), session = session(), maxRequests = 10});
  end;
  
  if(data.responseType == 'login' and data.result) then
    print('# Logged in');
    LoggedIn = true;
  end;
  
  if(data.responseType == 'playbacks') then
    updatePlaybacks(data);
    LastResult = os.time();
  end;
  
end;

PollTimer = Timer.New();
PollTimer:Start(0.25);  
PollTimer.EventHandler = function()

  if(not S.IsConnected) then return; end;

  send({ 
    requestType = "playbacks",
    startIndex = {math.floor((Controls['First Fader'].Value - 1) / 5) * 5},
    itemsCount = {tonumber(Properties['Fader Count'].Value) + 5},
    pageIndex = Controls['Fader Page'].Value - 1,
    itemsType = {2},
    view = 2,
    execButtonViewMode = 1,
    buttonsViewMode = 0,
    session = session(),
    maxRequests = 10
  });
  
  send({ 
    requestType = "playbacks",
    startIndex = {math.floor((Controls['First Button'].Value - 1) / 5) * 5},
    itemsCount = {tonumber(Properties['Button Count'].Value) + 5},
    pageIndex = Controls['Button Page'].Value - 1,
    itemsType = {3},
    view = 3,
    execButtonViewMode = 2,
    buttonsViewMode = 0,
    session = session(),
    maxRequests = 10
  });
  
  -- Send session keepalive every 10s
  if(os.time() - (LastWake or 0) > 10) then LastWake = os.time(); send({session = session()}); end; 
  
end;

function RenderTile(item, button)

  local function svg(height, body)
    return ([[<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="100" height="%d">%s</svg>]]):format(height, body);
  end;
  
  local headerBG = ([[<rect x="1" y="1" rx="8" ry="8" width="98" height="33" style="fill: %s" />]]):format(item.bC); -- header background
  local headerText =
    ([[<text x="4" y="13" textLength="100" fill="%s" style="font-size: 13px;">%s</text>]]):format(item.i.c, item.i.t) .. -- exec no
    ([[<text x="96" y="13" textLength="100" fill="%s" text-anchor="end" style="font-size: 13px;">%s</text>]]):format(item.oI.c, item.oI.t) .. -- pool no
    ([[<text x="50" y="13" textLength="100" fill="%s" text-anchor="middle" style="font-size: 13px;">%s</text>]]):format(item.oType.c, item.oType.t) .. -- title
    ([[<text x="50" y="27" textLength="100" fill="%s" text-anchor="middle" style="font-size: 13px;">%s</text>]]):format(item.tt.c, item.tt.t); -- subtitle
  
  local headerTextShadow = headerText
    :gsub('([xy])="(%d+)"', function(a,b) return a .. '="' .. b+1 .. '"' end)
    :gsub('fill="([^"]+)"', 'fill="black"');
  
  local cueBG = ([[<rect x="1" y="32" rx="8" ry="8" width="98" height="68" style="fill: %s; stroke-width: 2px; opacity: 0.25" />]]):format(item.bdC);
  
  local cues = '';
  if(item.cues.items) then
    for i=1, #item.cues.items do
      local h = math.floor(68 / #item.cues.items + 0.5);
      local hh = math.floor(h/2 + 0.5);
      local y = i * h + 32;
      local cue = item.cues.items[i];
      cueBG = cueBG .. 
        ([[<rect x="1" y="%d" rx="4" ry="4" width="%s" height="%d" style="fill: %s" />]]):format(y-h, (cue.pgs.v or 0) * 98, h, cue.pgs.bC or 'blue'); -- progress
      cues = cues ..
        (i < #item.cues.items and -- line if not last
          ([[<line x1="1" y1="%d" x2="109" y2="%d" style="stroke: %s; stroke-width: 2px" />]]):format(y, y, item.bdC)
        or '') ..
        ([[<text x="50" y="%d" textLength="100" fill="%s" text-anchor="middle" style="font-size: 13px;">%s</text>]]):format(y-hh+6, cue.c, cue.t or ''); -- text
    end;
  end;
  
  local bottomButton = 
    (button and ([[<line x1="1" y1="100" x2="109" y2="100" style="stroke: %s; stroke-width: 4px" />]]):format(item.bdC) or '') ..
    (item.bottomButtons and (
      ([[<text x="50" y="113" textLength="100" fill="%s" text-anchor="middle" style="font-size: 13px;">%s</text>]]):format(
        item.bottomButtons.items[1].n.c,
        item.bottomButtons.items[1].n.t
      )
    ) or ''
  );
  
  local extraHeight = (button and 16 or 0);
 
  local headerLine = ([[<line x1="1" y1="32" x2="109" y2="32" style="stroke: %s; stroke-width: 4px" />]]):format(item.bdC);
  local border = ([[<rect x="1" y="1" rx="8" ry="8" width="98" height="%d" style="fill: none; stroke: %s; stroke-width: 2px" />]]):format(100 + extraHeight, item.bdC);
  
  return svg(102 + extraHeight,
    headerBG .. (item.oI.t ~= '' and headerTextShadow or '') .. headerText .. cueBG .. cues .. bottomButton .. headerLine .. border
  );
  
end;

-- Note: executors are return in blocks of 5
function updatePlaybacks(data)

  for _,itemSet in ipairs(data.itemGroups[1].items) do
    for _,item in ipairs(itemSet) do
    
      local executor = item.iExec + 1;
      local width = item.combinedItems;
      
      -- Action Buttons
      if(executor > 100) then
        for i=1, width do
          local buttonExec = i + executor - Controls['First Button'].Value;
          if(Controls.Button[buttonExec]) then
            Controls.Button[buttonExec].Style = json.encode({
              IconData = Crypto.Base64Encode(RenderTile(item, true)), 
              DrawChrome = false,
              Margin = 0,
              Legend = ''
            });

			-- Update the indicator LEDs/Pins for Action Buttons
			if(item['isRun'] == 1) then
				Controls['Button Status'][buttonExec].Value = true;
			else
				Controls['Button Status'][buttonExec].Value = false;
			end;
          end;
        end;
        
      -- Playbacks
      else        
        for i=1, width do

          (function()
          
            local ctlIndex = executor - Controls['First Fader'].Value + i;   
            if(not Controls['Fader Info'][ctlIndex]) then return; end;

            local function dim(color, factor)
              local parts = {color:match('^#(%x%x)(%x%x)(%x%x)$')};
              return string.format('#%02x%02x%02x',
                math.floor(tonumber(parts[1], 16) * factor + 0.5),
                math.floor(tonumber(parts[2], 16) * factor + 0.5),
                math.floor(tonumber(parts[3], 16) * factor + 0.5)
              );
            end;
            
            -- Show playback header / status block
            Controls['Fader Info'][ctlIndex].Style = json.encode({
              IconData = Crypto.Base64Encode(RenderTile(item)), 
              DrawChrome = false,
              Margin = 0,
              Legend = '', 
            });
            
            -- Update button style / labels
            for b=1,3 do
              if(item.executorBlocks) then
                Controls['Fader Button ' .. b][ctlIndex].Style = json.encode({
                  DrawChrome = true,
                  Legend = item.executorBlocks[i]['button' .. b].t,
                  StrokeColor = item.bdC,
                  TextColor = item.executorBlocks[i]['button' .. b].c
                });
              end;
            end;
            
            -- Update fader display
            Controls['Fader Level'][ctlIndex].Color = dim(item.bdC, 0.35);
            Controls['Fader Level'][ctlIndex].Style = json.encode({ StrokeColor = item.bdC });
            Controls['Fader Level'][ctlIndex].Position = item.executorBlocks[i].fader.v;

          end)();
          
        end;
      end;
    end;
    
  end;
end;

-- User input messages
function userInput(exec, page, t, data)
  local message = {
    requestType = 'playbacks_userInput',
    execIndex = exec - 1,
    maxRequests = 0,
    pageIndex = page,
    session = session(),
    ['type'] = t
  };
  for k,v in pairs(data) do message[k] = v; end;
  print(json.encode(message));
  send(message);
end;

-- Button messages
function button(exec, page, index, c)
  userInput(exec, page, 0, {
    pressed = c.Boolean,
    released = not c.Boolean,
    buttonId = index - 1
  });
end;

-- Fader messages
function fader(exec, page, c)
  userInput(exec, page, 1, {
    faderValue = c.Position
  });
end;

-- Get current page & exec
function PageAndExec(execType, i)
  local page = Controls[execType .. ' Page'].Value - 1;
  local exec = i + Controls['First ' .. execType].Value - 1;
  return page, exec;
end;

-- Direct Action Buttons
for i,c in ipairs(Controls['Button']) do
  c.EventHandler = function()
    local page, exec = PageAndExec('Button', i);
    button(exec, page, 1, c);
  end;
end;

-- Faders
for i in ipairs(Controls['Fader Level']) do
  for b=1,3 do
    Controls['Fader Button ' .. b][i].EventHandler = function(c)
      local page, exec = PageAndExec('Fader', i);
      button(exec, page, b, c);
    end;
  end;
  Controls['Fader Level'][i].EventHandler = function(c)
    local page, exec = PageAndExec('Fader', i);
    fader(exec, page, c);
  end;
end;

-- Command sender
function sendCmd(cmd)
  send({
    command = cmd,
    session = session(),
    requestType = 'command',
    maxRequests = 0
  });
end;

-- TX pin
Controls.TX.EventHandler = function(c)
  sendCmd(c.String);
  c.String = '';
end;

-- Notifications to commands
Notifications.Subscribe('MA2', sendCmd);

-- Command buttons
for i,c in ipairs(Controls['Send Command']) do
  c.EventHandler = function()
    sendCmd(Controls['Command'][i].String);
  end;
end;
